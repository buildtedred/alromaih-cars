// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CarBrand {
  id        String   @id @default(uuid())
  name      String   @unique
  name_ar   String?  // Optional Arabic name
  slug      String   @unique
  image     String
  cars      AllCar[]
}


model AllCar {
  id               String   @id @default(uuid())
  slug             String   @unique // Added slug field with unique constraint
  
  // Bilingual string fields
  model            String
  model_ar         String?

  description      String?
  description_ar   String?

  color            String?
  color_ar         String?

  condition        String?
  condition_ar     String?

  bodyType         String?
  bodyType_ar      String?

  fuelType         String?
  fuelType_ar      String?

  fuelTankCapacity String?
  fuelTankCapacity_ar String?

  transmission     String?
  transmission_ar  String?

  wheelDrive       String?
  wheelDrive_ar    String?

  infotainment     String?
  infotainment_ar  String?

  manufactured     String?
  manufactured_ar  String?

  safetyRating     String?
  safetyRating_ar  String?

  warranty         String?
  warranty_ar      String?

  registration     String?
  registration_ar  String?

  insuranceStatus  String?
  insuranceStatus_ar String?

  // Numeric fields + Arabic equivalents
  year             Int?
  year_ar          String?

  price            Float?
  price_ar         String?

  mileage          Int?
  mileage_ar       String?

  engineSize       Float?
  engineSize_ar    String?

  horsepower       Int?
  horsepower_ar    String?

  torque           Int?
  torque_ar        String?

  topSpeed         Int?
  topSpeed_ar      String?

  acceleration     Float?
  acceleration_ar  String?

  fuelEconomy      Float?
  fuelEconomy_ar   String?

  seats            Int?
  seats_ar         String?

  doors            Int?
  doors_ar         String?

  ownerCount       Int?
  ownerCount_ar    String?

  // Boolean fields (no Arabic versions)
  gps              Boolean?
  sunroof          Boolean?
  parkingSensors   Boolean?
  cruiseControl    Boolean?
  leatherSeats     Boolean?
  heatedSeats      Boolean?
  bluetooth        Boolean?
  climateControl   Boolean?
  keylessEntry     Boolean?
  rearCamera       Boolean?

  // Other
  taxValidity      DateTime?
  images           String[]
  specifications   Json?    // Fixed typo from "spacification" to "specifications"

  // Relations
  brandId          String
  brand            CarBrand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  variations       Variation[]
  otherVariations  OtherVariation[]
}


model Variation {
  id        String   @id @default(uuid())
  carId     String   @default(uuid()) // ✅ Ensure it's UUID
  car       AllCar   @relation(fields: [carId], references: [id], onDelete: Cascade)
  name      String // ✅ Variation Name (e.g., "Red Variant")
  colorName String // ✅ Color Name (e.g., "Red")
  colorHex  String // ✅ Color HEX Code (e.g., "#FF0000")
  images    String[] // ✅ Store multiple images
  price     Float // ✅ Price for this variation
}

model OtherVariation {
  id         String   @id @default(uuid())
  carId      String
  car        AllCar   @relation(fields: [carId], references: [id], onDelete: Cascade)
  name       String
  name_ar    String?  // New Arabic field
  colorName  String
  colorName_ar String? // New Arabic field
  colorHex   String
  images     String[]
  price      Float
}


model Logo {
  id        String   @id @default(uuid())
  title     String   // Optional: name/label of the logo (e.g., "Main Logo")
  imageUrl  String   // URL to the logo image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarCarousel {
  id          String   @id @default(uuid())
  title       String
  description String   // ✅ Added description
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model AppearanceSetting {
  id        String   @id @default(uuid())
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




///////////////////////////////////////

// Fuel Type Model
model FuelType {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Transmission Type Model
model TransmissionType {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Condition Type Model
model ConditionType {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Wheel Drive Type Model
model WheelDriveType {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Body Type Model
model BodyType {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Safety Rating Model
model SafetyRating {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Insurance Status Model
model InsuranceStatus {
  id        String   @id @default(cuid())
  title     String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////////////////////////////////////////////////////

model ProductView {
  id         Int      @id @default(autoincrement())
  productId  String
  data       Json     // <- sara data yahan save hoga
  viewedAt   DateTime @default(now())
}
