// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CarBrand {
  id    String   @id @default(uuid())
  name  String   @unique
  slug  String   @unique // Slug field added
  image String
  cars  AllCar[]
}

model AllCar {
  id               String           @id @default(uuid())
  model            String
  year             Int?
  brandId          String
  description      String?
  price            Float?
  color            String?
  condition        String?
  bodyType         String?
  mileage          Int?
  fuelType         String?
  fuelTankCapacity String?
  transmission     String?
  engineSize       Float?
  horsepower       Int?
  torque           Int?
  wheelDrive       String?
  topSpeed         Int?
  acceleration     Float?
  fuelEconomy      Float?
  seats            Int?
  doors            Int?
  infotainment     String?
  gps              Boolean?
  sunroof          Boolean?
  parkingSensors   Boolean?
  cruiseControl    Boolean?
  leatherSeats     Boolean?
  heatedSeats      Boolean?
  bluetooth        Boolean?
  climateControl   Boolean?
  keylessEntry     Boolean?
  rearCamera       Boolean?
  manufactured     String?
  safetyRating     String?
  warranty         String?
  registration     String?
  ownerCount       Int?
  insuranceStatus  String?
  taxValidity      DateTime?
  images           String[]         // Array of image URLs
  spacification    Json?            // Dynamic specifications
  brand            CarBrand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  variations       Variation[]      // Relation with Variations
  otherVariations  OtherVariation[] // Relation with Other Variations
}

model Variation {
  id        String   @id @default(uuid())
  carId     String   @default(uuid()) // ✅ Ensure it's UUID
  car       AllCar   @relation(fields: [carId], references: [id], onDelete: Cascade)
  name      String // ✅ Variation Name (e.g., "Red Variant")
  colorName String // ✅ Color Name (e.g., "Red")
  colorHex  String // ✅ Color HEX Code (e.g., "#FF0000")
  images    String[] // ✅ Store multiple images
  price     Float // ✅ Price for this variation
}

model OtherVariation {
  id        String   @id @default(uuid())
  carId     String
  car       AllCar   @relation(fields: [carId], references: [id], onDelete: Cascade)
  name      String
  colorName String
  colorHex  String
  images    String[]
  price     Float
}

// model AllCar {
//   id                String   @id @default(uuid())
//   model             String
//   year              Int
//   image             String   // Store image URL
//   brandId           String
//   brand             CarBrand @relation(fields: [brandId], references: [id], onDelete: Cascade)
//   price             Float    // Car price
//   mileage           Int      // Mileage in km
//   fuelType          String   // Petrol, Diesel, Electric, Hybrid, etc.
//   fuelTankCapacity  String   // Fuel tank capacity (liters)
//   transmission      String   // Manual or Automatic
//   color             String   // Car color
//   manufactured      String   // Manufacturing country or location
//   condition         String   // New, Used, Certified Pre-Owned, etc.
//   seats            Int      // Number of seats
//   doors            Int      // Number of doors (2, 4, etc.)
//   engineSize       Float?   // Engine capacity in liters (optional)
//   horsepower       Int?     // Horsepower of the car (optional)
//   torque           Int?     // Torque in Nm (optional)
//   wheelDrive       String   // FWD, RWD, AWD, 4WD
//   bodyType         String   // Sedan, SUV, Hatchback, Coupe, Convertible, etc.
//   safetyRating     String?  // Safety rating (e.g., 5-star, IIHS Top Safety Pick)
//   topSpeed         Int?     // Top speed in km/h
//   acceleration     Float?   // 0-100 km/h time in seconds
//   fuelEconomy      Float?   // Fuel economy (km per liter or miles per gallon)
//   infotainment     String?  // Infotainment system details (e.g., Apple CarPlay, Android Auto)
//   warranty         String?  // Manufacturer warranty details
//   registration     String?  // Registration details
//   ownerCount       Int?     // Number of previous owners (if used)
//   insuranceStatus  String?  // Insured, Not Insured
//   taxValidity      DateTime? // Road tax validity date
//   gps              Boolean  // Whether GPS navigation is included
//   sunroof          Boolean  // Whether the car has a sunroof
//   parkingSensors   Boolean  // Whether the car has parking sensors
//   cruiseControl    Boolean  // Whether the car has cruise control
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
// }


model Logo {
  id        String   @id @default(uuid())
  title     String   // Optional: name/label of the logo (e.g., "Main Logo")
  imageUrl  String   // URL to the logo image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CarCarousel {
  id          String   @id @default(uuid())
  title       String
  description String   // ✅ Added description
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model AppearanceSetting {
  id        String   @id @default(uuid())
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}